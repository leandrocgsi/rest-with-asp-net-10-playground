name: Integration Tests

on:
  push:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:20.10-dind
        options: --privileged
        env:
          DOCKER_TLS_CERTDIR: "" # Desativa TLS para simplicidade

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET 10
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "10.0.x"

      - name: Create Docker network
        run: docker network create test-network || true

      - name: Start SQL Server container
        run: |
          docker run -d --name sqlserver --network test-network \
            -e "ACCEPT_EULA=Y" \
            -e "SA_PASSWORD=@Admin123" \
            -p 1433:1433 \
            mcr.microsoft.com/mssql/server:2022-latest
          # Aguarda até o SQL Server estar pronto (máximo de 180 segundos)
          for i in {1..180}; do
            if docker run --rm --network test-network mcr.microsoft.com/mssql-tools \
              /opt/mssql-tools18/bin/sqlcmd -S sqlserver,1433 -U SA -P "@Admin123" -Q "SELECT 1" > /dev/null 2>&1; then
              echo "SQL Server está pronto"
              break
            fi
            echo "Aguardando SQL Server iniciar ($i/180)..."
            sleep 1
          done
          # Verifica se o contêiner está rodando
          if [ "$(docker inspect -f '{{.State.Running}}' sqlserver)" != "true" ]; then
            echo "SQL Server container não está rodando"
            docker logs sqlserver
            exit 1
          fi

      - name: Reset SA password
        run: |
          # Redefine a senha do SA para garantir consistência
          docker run --rm --network test-network mcr.microsoft.com/mssql-tools \
            /opt/mssql-tools18/bin/sqlcmd -S sqlserver,1433 -U SA -P "@Admin123" -Q "ALTER LOGIN sa WITH PASSWORD = '@Admin123';" || {
              echo "Falha ao redefinir a senha do SA"
              docker logs sqlserver
              exit 1
            }
          echo "Senha do SA redefinida com sucesso"

      - name: Verify SQL Server login
        run: |
          # Testa as credenciais do SA
          docker run --rm --network test-network mcr.microsoft.com/mssql-tools \
            /opt/mssql-tools18/bin/sqlcmd -S sqlserver,1433 -U SA -P "@Admin123" -Q "SELECT @@VERSION" || {
              echo "Falha ao conectar com as credenciais do SA"
              docker logs sqlserver
              exit 1
            }
          echo "Login do SA bem-sucedido"

      - name: Debug Docker environment
        run: |
          docker ps
          docker network ls
          docker network inspect test-network || true
          # Testa conectividade com sqlserver
          docker run --rm --network test-network mcr.microsoft.com/mssql-tools \
            /opt/mssql-tools18/bin/sqlcmd -S sqlserver,1433 -U SA -P "@Admin123" -Q "SELECT @@VERSION" || true
          # Testa resolução de hostname
          docker run --rm --network test-network mcr.microsoft.com/mssql-tools \
            /bin/sh -c "ping -c 3 sqlserver || true"
          # Testa conectividade do host
          /opt/mssql-tools18/bin/sqlcmd -S localhost,1433 -U SA -P "@Admin123" -Q "SELECT @@VERSION" || true
        if: always()

      - name: Restore dependencies
        run: dotnet restore
        working-directory: 19_IntroToIntegrationTests/RestWithASPNET10Erudio

      - name: Build
        run: dotnet build --configuration Release --no-restore
        working-directory: 19_IntroToIntegrationTests/RestWithASPNET10Erudio

      - name: Run tests
        run: |
          # Executa os testes dentro da mesma rede do contêiner SQL Server
          docker run --rm --network test-network \
            -v $(pwd)/19_IntroToIntegrationTests/RestWithASPNET10Erudio:/app \
            -w /app \
            mcr.microsoft.com/dotnet/sdk:10.0 \
            dotnet test --configuration Release --no-build --logger "trx;LogFileName=test_results.trx" --blame-hang-timeout 3m
        env:
          SQL_SERVER_CONNECTION_STRING: "Server=sqlserver,1433;Database=TestDb;User Id=SA;Password=@Admin123;TrustServerCertificate=True"
          ASPNETCORE_ENVIRONMENT: Test

      - name: Capture SQL Server logs
        run: docker logs sqlserver || true
        if: failure()